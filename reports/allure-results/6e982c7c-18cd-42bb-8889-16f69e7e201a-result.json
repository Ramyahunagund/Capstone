{"name": "test_checkboxes", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable\nStacktrace:\n\tGetHandleVerifier [0x0x106fe43+66515]\n\tGetHandleVerifier [0x0x106fe84+66580]\n\t(No symbol) [0x0xe5da6b]\n\t(No symbol) [0x0xe513fa]\n\t(No symbol) [0x0xe986a6]\n\t(No symbol) [0x0xe93da5]\n\t(No symbol) [0x0xe8ea2a]\n\t(No symbol) [0x0xed6ffc]\n\t(No symbol) [0x0xed68fa]\n\t(No symbol) [0x0xecafc6]\n\t(No symbol) [0x0xe9c2ca]\n\t(No symbol) [0x0xe9d154]\n\tGetHandleVerifier [0x0x12c7353+2521315]\n\tGetHandleVerifier [0x0x12c22d3+2500707]\n\tGetHandleVerifier [0x0x1097c94+229924]\n\tGetHandleVerifier [0x0x10881f8+165768]\n\tGetHandleVerifier [0x0x108ecad+193085]\n\tGetHandleVerifier [0x0x1078158+100072]\n\tGetHandleVerifier [0x0x10782f0+100480]\n\tGetHandleVerifier [0x0x10625aa+11066]\n\tBaseThreadInitThunk [0x0x75cb5d49+25]\n\tRtlInitializeExceptionChain [0x0x7779d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7779d661+561]", "trace": "@pytest.mark.order(6)\n    def test_checkboxes():\n        print(\"\\n=== TEST: Checkbox on Chrome ===\")\n>       driver = DriverFactory.get_driver(browser_name=\"chrome\", headless=False)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_demoqa.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ndrivers\\driver_factory.py:30: in get_driver\n    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027D1F16BCE0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom chrome not rea...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7779d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7779d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from chrome not reachable\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x106fe43+66515]\nE       \tGetHandleVerifier [0x0x106fe84+66580]\nE       \t(No symbol) [0x0xe5da6b]\nE       \t(No symbol) [0x0xe513fa]\nE       \t(No symbol) [0x0xe986a6]\nE       \t(No symbol) [0x0xe93da5]\nE       \t(No symbol) [0x0xe8ea2a]\nE       \t(No symbol) [0x0xed6ffc]\nE       \t(No symbol) [0x0xed68fa]\nE       \t(No symbol) [0x0xecafc6]\nE       \t(No symbol) [0x0xe9c2ca]\nE       \t(No symbol) [0x0xe9d154]\nE       \tGetHandleVerifier [0x0x12c7353+2521315]\nE       \tGetHandleVerifier [0x0x12c22d3+2500707]\nE       \tGetHandleVerifier [0x0x1097c94+229924]\nE       \tGetHandleVerifier [0x0x10881f8+165768]\nE       \tGetHandleVerifier [0x0x108ecad+193085]\nE       \tGetHandleVerifier [0x0x1078158+100072]\nE       \tGetHandleVerifier [0x0x10782f0+100480]\nE       \tGetHandleVerifier [0x0x10625aa+11066]\nE       \tBaseThreadInitThunk [0x0x75cb5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7779d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7779d661+561]\n\nC:\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "stdout", "source": "d84c6261-b30e-44cc-985c-43208c8939e7-attachment.txt", "type": "text/plain"}], "start": 1761103098859, "stop": 1761103200368, "uuid": "40e34395-4e6e-411b-9503-b8d9b842b368", "historyId": "77f1fe00164de21cacc77fbdc347d1fb", "testCaseId": "77f1fe00164de21cacc77fbdc347d1fb", "fullName": "tests.test_demoqa#test_checkboxes", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demoqa"}, {"name": "host", "value": "ASCENDI-VC9THP6"}, {"name": "thread", "value": "12664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoqa"}], "titlePath": ["tests", "test_demoqa.py"]}