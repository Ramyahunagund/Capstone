{"name": "test_login[Ramya Hunagund-ramya123-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0xb8fe83+66515]\n\tGetHandleVerifier [0x0xb8fec4+66580]\n\t(No symbol) [0x0x97dc48]\n\t(No symbol) [0x0x9c8704]\n\t(No symbol) [0x0x9c8aab]\n\t(No symbol) [0x0xa0f482]\n\t(No symbol) [0x0x9eb214]\n\t(No symbol) [0x0xa0cba7]\n\t(No symbol) [0x0x9eafc6]\n\t(No symbol) [0x0x9bc2ca]\n\t(No symbol) [0x0x9bd154]\n\tGetHandleVerifier [0x0xde73b3+2521347]\n\tGetHandleVerifier [0x0xde2333+2500739]\n\tGetHandleVerifier [0x0xbb7cd4+229924]\n\tGetHandleVerifier [0x0xba8238+165768]\n\tGetHandleVerifier [0x0xbaeced+193085]\n\tGetHandleVerifier [0x0xb98198+100072]\n\tGetHandleVerifier [0x0xb98330+100480]\n\tGetHandleVerifier [0x0xb825ea+11066]\n\tBaseThreadInitThunk [0x0x74c65d49+25]\n\tRtlInitializeExceptionChain [0x0x7711d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7711d661+561]", "trace": "browser_name = 'chrome', username = 'Ramya Hunagund', password = 'ramya123'\n\n    @pytest.mark.order(2)\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"edge\", \"firefox\"])\n    @pytest.mark.parametrize(\"username,password\", read_login_data())\n    def test_login(browser_name, username, password):\n        driver = DriverFactory.get_driver(browser_name=browser_name, headless=False)\n        driver.get(\"https://www.demoblaze.com\")\n        driver.maximize_window()\n        print(f\"\\n=== Starting login test for {username} on {browser_name} ===\")\n    \n        # ðŸ”¹ FEATURE 1: Broken Links Detection\n        broken_links_check(driver)\n    \n        # ðŸ”¹ FEATURE 2: Navigation Commands\n        driver.find_element(By.ID, \"login2\").click()\n        print(\"Clicked on login button.\")\n        time.sleep(2)\n        navigation_commands_demo(driver)\n    \n        # ðŸ”¹ FEATURE 3: Actual Login\n        login_page = LoginPage(driver)\n>       login_page.open_login_modal()\n\ntests\\test_login.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:14: in open_login_modal\n    WaitUtils.wait_for_element_clickable(self.driver, self.login_button_nav).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nutilities\\wait_utils.py:12: in wait_for_element_clickable\n    return WebDriverWait(driver, timeout).until(EC.element_to_be_clickable(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4bb1d3d64beed79fb20a0262d2a09bd2\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000028208422020>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xb8fe83+66515]\nE       \tGetHandleVerifier [0x0xb8fec4+66580]\nE       \t(No symbol) [0x0x97dc48]\nE       \t(No symbol) [0x0x9c8704]\nE       \t(No symbol) [0x0x9c8aab]\nE       \t(No symbol) [0x0xa0f482]\nE       \t(No symbol) [0x0x9eb214]\nE       \t(No symbol) [0x0xa0cba7]\nE       \t(No symbol) [0x0x9eafc6]\nE       \t(No symbol) [0x0x9bc2ca]\nE       \t(No symbol) [0x0x9bd154]\nE       \tGetHandleVerifier [0x0xde73b3+2521347]\nE       \tGetHandleVerifier [0x0xde2333+2500739]\nE       \tGetHandleVerifier [0x0xbb7cd4+229924]\nE       \tGetHandleVerifier [0x0xba8238+165768]\nE       \tGetHandleVerifier [0x0xbaeced+193085]\nE       \tGetHandleVerifier [0x0xb98198+100072]\nE       \tGetHandleVerifier [0x0xb98330+100480]\nE       \tGetHandleVerifier [0x0xb825ea+11066]\nE       \tBaseThreadInitThunk [0x0x74c65d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7711d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7711d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "attachments": [{"name": "stdout", "source": "c192ef68-472a-43a1-9baf-f0d110b6a5e3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'Ramya Hunagund'"}, {"name": "password", "value": "'ramya123'"}, {"name": "browser_name", "value": "'chrome'"}], "start": 1761074987781, "stop": 1761075193619, "uuid": "d3b19f4a-d0a3-4a23-aede-4c67a6ce806e", "historyId": "072bbec31f89678861ac1871afaf829e", "testCaseId": "a707b9555172d26c5c1ec2d556e674f3", "fullName": "tests.test_login#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "ASCENDI-VC9THP6"}, {"name": "thread", "value": "17044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py"]}