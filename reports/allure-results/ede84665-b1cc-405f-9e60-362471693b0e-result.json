{"name": "test_add_to_cart[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.66)\nStacktrace:\n\tGetHandleVerifier [0x0x57fe83+66515]\n\tGetHandleVerifier [0x0x57fec4+66580]\n\t(No symbol) [0x0x36dc48]\n\t(No symbol) [0x0x34c18d]\n\t(No symbol) [0x0x3e1a4e]\n\t(No symbol) [0x0x3e98a9]\n\t(No symbol) [0x0x3db193]\n\t(No symbol) [0x0x3ac2ca]\n\t(No symbol) [0x0x3ad154]\n\tGetHandleVerifier [0x0x7d73b3+2521347]\n\tGetHandleVerifier [0x0x7d2333+2500739]\n\tGetHandleVerifier [0x0x5a7cd4+229924]\n\tGetHandleVerifier [0x0x598238+165768]\n\tGetHandleVerifier [0x0x59eced+193085]\n\tGetHandleVerifier [0x0x588198+100072]\n\tGetHandleVerifier [0x0x588330+100480]\n\tGetHandleVerifier [0x0x5725ea+11066]\n\tBaseThreadInitThunk [0x0x74c65d49+25]\n\tRtlInitializeExceptionChain [0x0x7711d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7711d661+561]", "trace": "logged_in_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8fa00f6de23deda968e6b32de772c5c3\")>\n\n    @pytest.mark.order(3)\n    def test_add_to_cart(logged_in_driver):\n        driver = logged_in_driver\n        wait = WebDriverWait(driver, 10)\n        actions = ActionChains(driver)\n    \n        print(\"\\n=== Starting Add to Cart Test ===\")\n        driver.get(\"https://www.demoblaze.com\")\n        driver.maximize_window()\n    \n        print(\"[Login] Using already logged-in session\")\n    \n        # ðŸ”¹ FEATURE 1: List first 5 products on homepage\n        print(\"[Feature] Loading products...\")\n        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, \"#tbodyid .hrefch\")))\n        items = driver.find_elements(By.CSS_SELECTOR, \"#tbodyid .hrefch\")\n        print(f\"[Feature] Total products found: {len(items)}\")\n        for i, item in enumerate(items[:5], start=1):\n            print(f\"  Product {i}: {item.text}\")\n    \n        # ðŸ”¹ FEATURE 2: Open first product\n        product_page = ProductPage(driver)\n        print(\"[Step] Opening first product...\")\n        product_page.open_product()\n        time.sleep(1)\n    \n        # ðŸ”¹ FEATURE 3: Scroll down on product page\n        driver.execute_script(\"window.scrollBy(0, 500);\")\n        print(\"[Feature] Scrolled down 500px.\")\n        time.sleep(1)\n    \n        # ðŸ”¹ FEATURE 4: Add to Cart and handle Alert\n        print(\"[Feature] Adding product to cart...\")\n        product_page.add_to_cart()\n        try:\n            alert = wait.until(EC.alert_is_present())\n            print(f\"[Alert] Alert text: {alert.text}\")\n            alert.accept()\n            print(\"[Alert] Alert accepted successfully.\")\n        except:\n            print(\"[Alert] No alert appeared.\")\n    \n        # ðŸ”¹ FEATURE 5: Drag & Drop Simulation\n        try:\n            logo = driver.find_element(By.ID, \"nava\")\n            actions.drag_and_drop_by_offset(logo, 20, 0).perform()\n            print(\"[Feature] Drag action performed on logo.\")\n        except Exception as e:\n            print(\"[Feature] Drag simulation skipped:\", e)\n    \n        # ðŸ”¹ FEATURE 6: Right Click (context click)\n        try:\n            actions.context_click(logo).perform()\n            print(\"[Feature] Right-click action performed on logo.\")\n        except Exception as e:\n            print(\"[Feature] Right-click failed:\", e)\n    \n        # ðŸ”¹ FEATURE 7: Window Handling\n        print(\"[Feature] Opening new window and switching...\")\n>       main_window = driver.current_window_handle\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_add_to_cart.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:480: in current_window_handle\n    return self.execute(Command.W3C_GET_CURRENT_WINDOW_HANDLE)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200041363C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7711d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7711d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.66)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x57fe83+66515]\nE       \tGetHandleVerifier [0x0x57fec4+66580]\nE       \t(No symbol) [0x0x36dc48]\nE       \t(No symbol) [0x0x34c18d]\nE       \t(No symbol) [0x0x3e1a4e]\nE       \t(No symbol) [0x0x3e98a9]\nE       \t(No symbol) [0x0x3db193]\nE       \t(No symbol) [0x0x3ac2ca]\nE       \t(No symbol) [0x0x3ad154]\nE       \tGetHandleVerifier [0x0x7d73b3+2521347]\nE       \tGetHandleVerifier [0x0x7d2333+2500739]\nE       \tGetHandleVerifier [0x0x5a7cd4+229924]\nE       \tGetHandleVerifier [0x0x598238+165768]\nE       \tGetHandleVerifier [0x0x59eced+193085]\nE       \tGetHandleVerifier [0x0x588198+100072]\nE       \tGetHandleVerifier [0x0x588330+100480]\nE       \tGetHandleVerifier [0x0x5725ea+11066]\nE       \tBaseThreadInitThunk [0x0x74c65d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7711d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7711d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "395a4540-25a3-4c75-907c-d10ac6733d4b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "logged_in_driver", "value": "'chrome'"}], "start": 1761072613529, "stop": 1761072618345, "uuid": "85d06f68-1081-47fe-9325-9551e775b587", "historyId": "9d1b0b1d2d0310ca0df4ca8f178a6ba0", "testCaseId": "a65fce4e70cb5afd8c0f8bcce4c3e27a", "fullName": "tests.test_add_to_cart#test_add_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "host", "value": "ASCENDI-VC9THP6"}, {"name": "thread", "value": "17796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_to_cart"}], "titlePath": ["tests", "test_add_to_cart.py"]}